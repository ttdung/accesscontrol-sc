import type { Artifact, BuildInfo, HardhatRuntimeEnvironment } from "hardhat/types";
import type { CompilerOutputContract, ContractInfo, FinderExtensionArguments, Metadata, SourceDependencies } from "../types";
export declare class Finder {
    private hre;
    private compiledOnce;
    private warnedOnce;
    contractPath: string;
    contractName: string;
    contractFullyQualifiedName: string;
    contractArtifact: Artifact;
    contractBuildInfo: BuildInfo;
    contractMetadata: Metadata;
    contractOutput: CompilerOutputContract;
    constructor(hre: HardhatRuntimeEnvironment);
    setFor: ({ contractPath, contractName, compilerTaskArgs, options, }?: FinderExtensionArguments) => Promise<void>;
    getArtifact: () => Artifact;
    getBuildInfo: () => Promise<BuildInfo>;
    getAbi: () => any[];
    getMetadata: () => Metadata;
    getBytecode: () => string;
    getBytecodeRuntime: () => string;
    getLinkReferences: () => import("hardhat/types").LinkReferences;
    getLinkReferencesRuntime: () => import("hardhat/types").LinkReferences;
    getImmutableReferences: () => {
        [key: string]: {
            start: number;
            length: number;
        }[];
    } | undefined;
    getImmutableReferencesRuntime: () => {
        [key: string]: {
            start: number;
            length: number;
        }[];
    } | undefined;
    getSourceCode: () => string;
    getDependenciesSourceCode: () => SourceDependencies;
    getDependenciesInfo: () => ContractInfo[];
    getSettings: () => {
        optimizer: {
            runs?: number | undefined;
            enabled?: boolean | undefined;
        };
        metadata?: {
            useLiteralContent: boolean;
        } | undefined;
        outputSelection: {
            [sourceName: string]: {
                [contractName: string]: string[];
            };
        };
        evmVersion?: string | undefined;
        libraries?: {
            [libraryFileName: string]: {
                [libraryName: string]: string;
            };
        } | undefined;
        remappings?: string[] | undefined;
    };
    getSolcVersion: () => {
        short: string;
        long: string;
    };
    getAst: () => any;
    getMethodIdentifiers: () => {
        [methodSignature: string]: string;
    };
    getOpcodes: () => string;
    getOpcodesRuntime: () => string;
    getStorageLayout: () => import("../types").StorageLayout | undefined;
    getFullyQualifiedName: () => string;
    getDeveloperDocument: () => any;
    getUserDocument: () => any;
    getGeneratedSources: () => any;
    getGeneratedSourcesRuntime: () => any;
    getSourceMap: () => string;
    getSourceMapRuntime: () => string;
    private setInitialContractInfo;
    private validate;
    private compile;
}
//# sourceMappingURL=Finder.d.ts.map