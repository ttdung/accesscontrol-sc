/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface FileAccessControl0Interface extends utils.Interface {
  functions: {
    "addFile(bytes32,string,address[])": FunctionFragment;
    "dataOwner(address)": FunctionFragment;
    "fileOwners(bytes32)": FunctionFragment;
    "fileWriters(bytes32,uint256)": FunctionFragment;
    "isWriter(bytes32,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "readFileRule(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDataOwner(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFile(bytes32,bytes32)": FunctionFragment;
    "updateReadRule(bytes32,bytes32,string)": FunctionFragment;
    "updateWriteList(bytes32,bytes32,address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addFile"
      | "dataOwner"
      | "fileOwners"
      | "fileWriters"
      | "isWriter"
      | "owner"
      | "readFileRule"
      | "renounceOwnership"
      | "setDataOwner"
      | "transferOwnership"
      | "updateFile"
      | "updateReadRule"
      | "updateWriteList"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addFile",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dataOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fileOwners",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "fileWriters",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWriter",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readFileRule",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDataOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFile",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReadRule",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWriteList",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fileOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fileWriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWriter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readFileRule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateReadRule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWriteList",
    data: BytesLike
  ): Result;

  events: {
    "AddFile(bytes32,address,string,address[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateFile(bytes32,bytes32)": EventFragment;
    "UpdateReadRule(bytes32,bytes32,string)": EventFragment;
    "UpdateWriteList(bytes32,bytes32,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddFile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateReadRule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateWriteList"): EventFragment;
}

export interface AddFileEventObject {
  fileId: string;
  owner: string;
  readRule: string;
  writeList: string[];
}
export type AddFileEvent = TypedEvent<
  [string, string, string, string[]],
  AddFileEventObject
>;

export type AddFileEventFilter = TypedEventFilter<AddFileEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpdateFileEventObject {
  newFileId: string;
  oldFileId: string;
}
export type UpdateFileEvent = TypedEvent<
  [string, string],
  UpdateFileEventObject
>;

export type UpdateFileEventFilter = TypedEventFilter<UpdateFileEvent>;

export interface UpdateReadRuleEventObject {
  newFileId: string;
  oldFileId: string;
  readRule: string;
}
export type UpdateReadRuleEvent = TypedEvent<
  [string, string, string],
  UpdateReadRuleEventObject
>;

export type UpdateReadRuleEventFilter = TypedEventFilter<UpdateReadRuleEvent>;

export interface UpdateWriteListEventObject {
  newFileId: string;
  oldFileId: string;
  writeList: string[];
}
export type UpdateWriteListEvent = TypedEvent<
  [string, string, string[]],
  UpdateWriteListEventObject
>;

export type UpdateWriteListEventFilter = TypedEventFilter<UpdateWriteListEvent>;

export interface FileAccessControl0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FileAccessControl0Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFile(
      fileId: PromiseOrValue<BytesLike>,
      readRule: PromiseOrValue<string>,
      writeList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    fileOwners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fileWriters(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isWriter(
      fileId: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    readFileRule(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDataOwner(
      user: PromiseOrValue<string>,
      isDataOwner: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFile(
      newFileId: PromiseOrValue<BytesLike>,
      oldFileId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateReadRule(
      newFileId: PromiseOrValue<BytesLike>,
      oldFileId: PromiseOrValue<BytesLike>,
      readRule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWriteList(
      newFileId: PromiseOrValue<BytesLike>,
      oldFileId: PromiseOrValue<BytesLike>,
      writeList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addFile(
    fileId: PromiseOrValue<BytesLike>,
    readRule: PromiseOrValue<string>,
    writeList: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataOwner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  fileOwners(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  fileWriters(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  isWriter(
    fileId: PromiseOrValue<BytesLike>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  readFileRule(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDataOwner(
    user: PromiseOrValue<string>,
    isDataOwner: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFile(
    newFileId: PromiseOrValue<BytesLike>,
    oldFileId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateReadRule(
    newFileId: PromiseOrValue<BytesLike>,
    oldFileId: PromiseOrValue<BytesLike>,
    readRule: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWriteList(
    newFileId: PromiseOrValue<BytesLike>,
    oldFileId: PromiseOrValue<BytesLike>,
    writeList: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addFile(
      fileId: PromiseOrValue<BytesLike>,
      readRule: PromiseOrValue<string>,
      writeList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    dataOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fileOwners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    fileWriters(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    isWriter(
      fileId: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    readFileRule(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDataOwner(
      user: PromiseOrValue<string>,
      isDataOwner: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFile(
      newFileId: PromiseOrValue<BytesLike>,
      oldFileId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReadRule(
      newFileId: PromiseOrValue<BytesLike>,
      oldFileId: PromiseOrValue<BytesLike>,
      readRule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWriteList(
      newFileId: PromiseOrValue<BytesLike>,
      oldFileId: PromiseOrValue<BytesLike>,
      writeList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddFile(bytes32,address,string,address[])"(
      fileId?: PromiseOrValue<BytesLike> | null,
      owner?: null,
      readRule?: null,
      writeList?: null
    ): AddFileEventFilter;
    AddFile(
      fileId?: PromiseOrValue<BytesLike> | null,
      owner?: null,
      readRule?: null,
      writeList?: null
    ): AddFileEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "UpdateFile(bytes32,bytes32)"(
      newFileId?: PromiseOrValue<BytesLike> | null,
      oldFileId?: PromiseOrValue<BytesLike> | null
    ): UpdateFileEventFilter;
    UpdateFile(
      newFileId?: PromiseOrValue<BytesLike> | null,
      oldFileId?: PromiseOrValue<BytesLike> | null
    ): UpdateFileEventFilter;

    "UpdateReadRule(bytes32,bytes32,string)"(
      newFileId?: PromiseOrValue<BytesLike> | null,
      oldFileId?: PromiseOrValue<BytesLike> | null,
      readRule?: null
    ): UpdateReadRuleEventFilter;
    UpdateReadRule(
      newFileId?: PromiseOrValue<BytesLike> | null,
      oldFileId?: PromiseOrValue<BytesLike> | null,
      readRule?: null
    ): UpdateReadRuleEventFilter;

    "UpdateWriteList(bytes32,bytes32,address[])"(
      newFileId?: PromiseOrValue<BytesLike> | null,
      oldFileId?: PromiseOrValue<BytesLike> | null,
      writeList?: null
    ): UpdateWriteListEventFilter;
    UpdateWriteList(
      newFileId?: PromiseOrValue<BytesLike> | null,
      oldFileId?: PromiseOrValue<BytesLike> | null,
      writeList?: null
    ): UpdateWriteListEventFilter;
  };

  estimateGas: {
    addFile(
      fileId: PromiseOrValue<BytesLike>,
      readRule: PromiseOrValue<string>,
      writeList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fileOwners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fileWriters(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWriter(
      fileId: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    readFileRule(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDataOwner(
      user: PromiseOrValue<string>,
      isDataOwner: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFile(
      newFileId: PromiseOrValue<BytesLike>,
      oldFileId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateReadRule(
      newFileId: PromiseOrValue<BytesLike>,
      oldFileId: PromiseOrValue<BytesLike>,
      readRule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWriteList(
      newFileId: PromiseOrValue<BytesLike>,
      oldFileId: PromiseOrValue<BytesLike>,
      writeList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFile(
      fileId: PromiseOrValue<BytesLike>,
      readRule: PromiseOrValue<string>,
      writeList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fileOwners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fileWriters(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWriter(
      fileId: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readFileRule(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDataOwner(
      user: PromiseOrValue<string>,
      isDataOwner: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFile(
      newFileId: PromiseOrValue<BytesLike>,
      oldFileId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateReadRule(
      newFileId: PromiseOrValue<BytesLike>,
      oldFileId: PromiseOrValue<BytesLike>,
      readRule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWriteList(
      newFileId: PromiseOrValue<BytesLike>,
      oldFileId: PromiseOrValue<BytesLike>,
      writeList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
