/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface FileAccessControlInterface extends utils.Interface {
  functions: {
    "addFile(bytes32,string,string,address[],uint256)": FunctionFragment;
    "approveProposal(bytes32)": FunctionFragment;
    "dataOwner(address)": FunctionFragment;
    "files(bytes32)": FunctionFragment;
    "isInList(address,address[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDataOwner(address,bool)": FunctionFragment;
    "submitUpdateFileProposal(bytes32,string,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "writeProposal(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addFile"
      | "approveProposal"
      | "dataOwner"
      | "files"
      | "isInList"
      | "owner"
      | "renounceOwnership"
      | "setDataOwner"
      | "submitUpdateFileProposal"
      | "transferOwnership"
      | "writeProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addFile",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "dataOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "files",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInList",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDataOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitUpdateFileProposal",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "writeProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "addFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "files", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitUpdateFileProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeProposal",
    data: BytesLike
  ): Result;

  events: {
    "AddFile(bytes32,address,string,string,address[],uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateFile(bytes32,string,string)": EventFragment;
    "UpdateReadRule(bytes32,bytes32,string)": EventFragment;
    "UpdateWriteList(bytes32,bytes32,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddFile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateReadRule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateWriteList"): EventFragment;
}

export interface AddFileEventObject {
  fileId: string;
  owner: string;
  name: string;
  readRule: string;
  writeList: string[];
  threshold: BigNumber;
}
export type AddFileEvent = TypedEvent<
  [string, string, string, string, string[], BigNumber],
  AddFileEventObject
>;

export type AddFileEventFilter = TypedEventFilter<AddFileEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpdateFileEventObject {
  fileId: string;
  oldname: string;
  newname: string;
}
export type UpdateFileEvent = TypedEvent<
  [string, string, string],
  UpdateFileEventObject
>;

export type UpdateFileEventFilter = TypedEventFilter<UpdateFileEvent>;

export interface UpdateReadRuleEventObject {
  newFileId: string;
  oldFileId: string;
  readRule: string;
}
export type UpdateReadRuleEvent = TypedEvent<
  [string, string, string],
  UpdateReadRuleEventObject
>;

export type UpdateReadRuleEventFilter = TypedEventFilter<UpdateReadRuleEvent>;

export interface UpdateWriteListEventObject {
  newFileId: string;
  oldFileId: string;
  writeList: string[];
}
export type UpdateWriteListEvent = TypedEvent<
  [string, string, string[]],
  UpdateWriteListEventObject
>;

export type UpdateWriteListEventFilter = TypedEventFilter<UpdateWriteListEvent>;

export interface FileAccessControl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FileAccessControlInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFile(
      fileId: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      readRule: PromiseOrValue<string>,
      writeList: PromiseOrValue<string>[],
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveProposal(
      fileId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    files(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        owner: string;
        name: string;
        readRule: string;
        threshold: BigNumber;
      }
    >;

    isInList(
      user: PromiseOrValue<string>,
      list: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDataOwner(
      user: PromiseOrValue<string>,
      isDataOwner: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitUpdateFileProposal(
      fileId: PromiseOrValue<BytesLike>,
      oldname: PromiseOrValue<string>,
      newname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    writeProposal(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { oldname: string; newname: string }>;
  };

  addFile(
    fileId: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<string>,
    readRule: PromiseOrValue<string>,
    writeList: PromiseOrValue<string>[],
    threshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveProposal(
    fileId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataOwner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  files(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      owner: string;
      name: string;
      readRule: string;
      threshold: BigNumber;
    }
  >;

  isInList(
    user: PromiseOrValue<string>,
    list: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDataOwner(
    user: PromiseOrValue<string>,
    isDataOwner: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitUpdateFileProposal(
    fileId: PromiseOrValue<BytesLike>,
    oldname: PromiseOrValue<string>,
    newname: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  writeProposal(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { oldname: string; newname: string }>;

  callStatic: {
    addFile(
      fileId: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      readRule: PromiseOrValue<string>,
      writeList: PromiseOrValue<string>[],
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveProposal(
      fileId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    dataOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    files(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        owner: string;
        name: string;
        readRule: string;
        threshold: BigNumber;
      }
    >;

    isInList(
      user: PromiseOrValue<string>,
      list: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDataOwner(
      user: PromiseOrValue<string>,
      isDataOwner: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitUpdateFileProposal(
      fileId: PromiseOrValue<BytesLike>,
      oldname: PromiseOrValue<string>,
      newname: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    writeProposal(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { oldname: string; newname: string }>;
  };

  filters: {
    "AddFile(bytes32,address,string,string,address[],uint256)"(
      fileId?: PromiseOrValue<BytesLike> | null,
      owner?: null,
      name?: null,
      readRule?: null,
      writeList?: null,
      threshold?: null
    ): AddFileEventFilter;
    AddFile(
      fileId?: PromiseOrValue<BytesLike> | null,
      owner?: null,
      name?: null,
      readRule?: null,
      writeList?: null,
      threshold?: null
    ): AddFileEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "UpdateFile(bytes32,string,string)"(
      fileId?: PromiseOrValue<BytesLike> | null,
      oldname?: null,
      newname?: null
    ): UpdateFileEventFilter;
    UpdateFile(
      fileId?: PromiseOrValue<BytesLike> | null,
      oldname?: null,
      newname?: null
    ): UpdateFileEventFilter;

    "UpdateReadRule(bytes32,bytes32,string)"(
      newFileId?: PromiseOrValue<BytesLike> | null,
      oldFileId?: PromiseOrValue<BytesLike> | null,
      readRule?: null
    ): UpdateReadRuleEventFilter;
    UpdateReadRule(
      newFileId?: PromiseOrValue<BytesLike> | null,
      oldFileId?: PromiseOrValue<BytesLike> | null,
      readRule?: null
    ): UpdateReadRuleEventFilter;

    "UpdateWriteList(bytes32,bytes32,address[])"(
      newFileId?: PromiseOrValue<BytesLike> | null,
      oldFileId?: PromiseOrValue<BytesLike> | null,
      writeList?: null
    ): UpdateWriteListEventFilter;
    UpdateWriteList(
      newFileId?: PromiseOrValue<BytesLike> | null,
      oldFileId?: PromiseOrValue<BytesLike> | null,
      writeList?: null
    ): UpdateWriteListEventFilter;
  };

  estimateGas: {
    addFile(
      fileId: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      readRule: PromiseOrValue<string>,
      writeList: PromiseOrValue<string>[],
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveProposal(
      fileId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    files(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInList(
      user: PromiseOrValue<string>,
      list: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDataOwner(
      user: PromiseOrValue<string>,
      isDataOwner: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitUpdateFileProposal(
      fileId: PromiseOrValue<BytesLike>,
      oldname: PromiseOrValue<string>,
      newname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    writeProposal(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFile(
      fileId: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      readRule: PromiseOrValue<string>,
      writeList: PromiseOrValue<string>[],
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveProposal(
      fileId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    files(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInList(
      user: PromiseOrValue<string>,
      list: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDataOwner(
      user: PromiseOrValue<string>,
      isDataOwner: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitUpdateFileProposal(
      fileId: PromiseOrValue<BytesLike>,
      oldname: PromiseOrValue<string>,
      newname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    writeProposal(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
